<script>
    // ------------------------------------------------------------------------|
    // Link Storage:                                                           |
    // https://api.are.na/v2/channels/super-goods-t2eow_bye1u                  | TEST
    // https://api.are.na/v2/channels/super-goods-lhev24-ol-y                  | REAL
    // ------------------------------------------------------------------------|

    import { onMount } from 'svelte';
    import Navbar from "../components/Navbar.svelte";
    import { fetchData } from './utils/fetchData';
    import { slide } from 'svelte/transition';
    import '../components/MainStyles.css';

    let mainChannelSlug = "super-goods-t2eow_bye1u"; // Replace this with the actual main channel slug
    let channel = { contents: [] }; // This will store data fetched during initial mount
    let selectedChannelData = null; // This will store data for the channel selected by the user
    let selectedChannelIndex = null; // This will store the index of the selected channel
    let currentPage = 1; // Pagination state for the selected channel
    let selectedItem = null; // This will store the selected item for description display
    let mainChannelPage = 1; // Pagination state for the main channel
    let hasMoreChannels = true; // To track if more channels are available to load
    let hasMoreItems = true; // To track if more items are available in the selected channel
    let loadingChannelIndex = -1; // Track the index of the loading channel
    let loadingItems = false; // Track loading state of load more items
    let loadingMoreChannels = false; // Track loading state of load more channels

    // Variables for the number of channels and items to load per request
    const CHANNELS_PER_PAGE = 20;
    const ITEMS_PER_PAGE = 45;
    const INITIAL_ITEMS_PER_PAGE = 45;

    function formatDate(dateString) {
        const options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: '2-digit', minute: '2-digit' };
        const date = new Date(dateString);
        return date.toLocaleDateString(undefined, options);
    }

    onMount(async () => {
        await loadInitialChannels();
    });

    async function loadInitialChannels() {
        const initialData = await fetchData(mainChannelSlug, CHANNELS_PER_PAGE, mainChannelPage); // Fetch initial data for the main channel
        console.log("Initial Data", initialData); // Log the initial data to the console for debugging
        if (initialData.contents) {
            channel.contents = initialData.contents; // No need to reverse if the API returns sorted data
            channel.title = initialData.title; // Set the title property
            channel.id = initialData.id;
            channel.description = initialData.metadata.description;
            hasMoreChannels = initialData.contents.length === CHANNELS_PER_PAGE; // Update the flag based on the response length
        }
    }

    async function handleChannelClick(channelSlug, index) {
        loadingChannelIndex = index; // Set the loading channel index
        try {
            const data = await fetchData(channelSlug, INITIAL_ITEMS_PER_PAGE, 1); // Fetch initial data for the selected channel
            if (data.contents) {
                selectedChannelData = { ...data, contents: data.contents }; // No need to reverse if the API returns sorted data
                selectedChannelIndex = index; // Set the index of the selected channel
                selectedItem = null; // Reset the selected item
                currentPage = Math.ceil(data.contents.length / ITEMS_PER_PAGE); // Set the current page based on the number of items already loaded
                hasMoreItems = data.contents.length === INITIAL_ITEMS_PER_PAGE; // Update the flag based on the response length
                console.log("handleChannelClick - Selected Data", selectedChannelData);
            }
        } catch (error) {
            console.error('Error loading the channel:', error); // Log any errors encountered during fetch
        } finally {
            loadingChannelIndex = -1; // Reset the loading channel index
        }
    }

    async function loadMoreChannels() {
        loadingMoreChannels = true; // Start loading
        mainChannelPage += 1;
        const moreData = await fetchData(mainChannelSlug, CHANNELS_PER_PAGE, mainChannelPage); // Fetch more channels
        if (moreData.contents) {
            channel.contents = channel.contents.concat(moreData.contents); // Append the new data to the existing contents
            hasMoreChannels = moreData.contents.length === CHANNELS_PER_PAGE; // Update the flag based on the response length
            console.log("loadMoreChannels - Updated Channel Contents", channel.contents);
        } else {
            hasMoreChannels = false; // No more channels to load
        }
        loadingMoreChannels = false; // End loading
    }

    async function handleItemClick(item) {
        if (selectedItem === item) {
            selectedItem = null; // Deselect the item if it's already selected
        } else {
            selectedItem = item; // Select the item
        }
    }

    function handleCloseClick() {
        selectedItem = null; // Deselect the item when close button is clicked
    }

    async function loadMore(channelSlug) {
        loadingItems = true; // Start loading
        try {
            console.log('Loading more items for:', channelSlug);
            currentPage += 1;
            const moreData = await fetchData(channelSlug, ITEMS_PER_PAGE, currentPage);
            console.log('More Data:', moreData);
            if (moreData.contents && moreData.contents.length > 0) {
                // Filter out any items that are already in the existing contents
                const newContents = moreData.contents.filter(item => 
                    !selectedChannelData.contents.some(existingItem => existingItem.id === item.id)
                );

                selectedChannelData.contents = selectedChannelData.contents.concat(newContents); // Append the new data to the existing contents
                hasMoreItems = moreData.contents.length === ITEMS_PER_PAGE; // Update the flag based on the response length
                console.log('loadMore - Updated Selected Channel Contents', selectedChannelData.contents);
            } else {
                hasMoreItems = false; // No more items to load
            }
            console.log('hasMoreItems:', hasMoreItems);
        } catch (error) {
            console.error('Error loading more items:', error);
        } finally {
            loadingItems = false; // End loading
        }
    }
</script>

<!-- Main Channel -->
{#if channel.contents && Array.isArray(channel.contents) && channel.contents.length > 0}

<!-- Site Description -->
<div class="juni-24">
    <p id="site-description">{channel.description}</p>
</div>

<!-- Site Navbar -->
<Navbar/>

<!-- Site Header -->
<section class="site-header">
    <div class="site-title">
        <p>{channel.title}</p>
    </div>
    <div class="site-navbar">
        <!-- Add Nav Bar -->
    </div>
</section>
<!-- / Site Header -->

<!-- Site Content Container -->
<section class="site-content-container juni-18">
    {#each channel.contents as content, index}

    <!-- Channel Content -->
    <div class="channel-container">

        <div class="channel-list">
            <button id="channelItemList" class="channel-list-item juni-18" on:click={() => handleChannelClick(content.slug, index)}>
                {content.title ?? 'Untitled Channel'} 
                {#if loadingChannelIndex === index} <span>~ Fetching Content â˜ž</span> {/if}
            </button>
        </div>

        {#if selectedChannelData && selectedChannelIndex === index}
            <div class="selected-channel-container" transition:slide>
                <div class="selected-channel-header">
                    <p class="selected-channel-header-description">{selectedChannelData.metadata.description ?? 'No description available.'}</p>
                    <p class="selected-channel-header-length">Length : {selectedChannelData.length ?? 'No length available'}</p>
                    <p class="selected-channel-header-updated">Last Updated : {formatDate(selectedChannelData.updated_at)}</p>
                </div>

                <div class="selected-channel-content flex-container">
                    {#each selectedChannelData.contents as item, idx}
                        <div class="block flex-item">
                            <!-- svelte-ignore a11y-click-events-have-key-events -->
                            <!-- svelte-ignore a11y-no-static-element-interactions -->
                            <!-- svelte-ignore a11y-no-static-element-interactions -->
                            <div id="{item.class ?? 'No-Class'}" class="block-grid-item juni-14">
                                <!-- svelte-ignore a11y-click-events-have-key-events -->
                                <!-- svelte-ignore a11y-no-static-element-interactions -->
                                {#if item.image && item.image.thumb && item.image.thumb.url}
                                    <!-- svelte-ignore a11y-click-events-have-key-events -->
                                    <div class="block-image" on:click={() => handleItemClick(item)}>
                                        <img src="{item.image.thumb.url}" alt="">
                                    </div>
                                {/if}

                                <!-- svelte-ignore a11y-click-events-have-key-events -->
                                <div class="block-contentHTML" on:click={() => handleItemClick(item)}>
                                    {#if item.content_html}
                                        <p>{@html item.content_html}</p>
                                    {/if}
                                </div>

                                <div class="block-title">
                                    <span on:click={() => handleItemClick(item)}>{idx + 1}. {item.title ?? 'Untitled Item'}</span>
                                    {#if item.source && item.source.url}
                                        <span>: <a class="clear-link" target="_blank" rel="noopener noreferrer" href="{item.source.url ?? 'No Url'}">Source</a></span>
                                    {/if}
                                    {#if item.class}
                                        <span>: {item.class ?? 'No Class'}</span>
                                    {/if}
                                </div>
                            </div>

                            {#if selectedItem === item}
                                <div class="selected-block-content-container juni-18" transition:slide>
                                    <div class="selected-block-content">
                                        <button id="cardButton" class="close-button juni-18" on:click={handleCloseClick}>Close</button>
                                    
                                        {#if item.image && item.image.display && item.image.display.url}
                                            <div class="selected-block-content-image">
                                                <img src="{item.image.display.url}" alt="">
                                            </div>
                                        {/if}

                                        <div class="details-tags card-flex-container">
                                            {#if item.created_at}
                                                <p id="tag" class="card-flex-item">{formatDate(item.created_at)}</p>
                                            {/if}

                                            {#if item.class}
                                                <p id="tag" class="card-flex-item">{item.class}</p>
                                            {/if}
                                        </div>

                                        <div class="selected-block-content-details">
                                            <div class="details-header">
                                                {#if item.title} 
                                                    <span id="title">{item.title ?? 'No Description'}</span>
                                                {/if}
                                                {#if item.source && item.source.url}
                                                    <span id="title"> : <a class="clear-link" target="_blank" rel="noopener noreferrer" href="{item.source.url}">Source</a></span>
                                                {/if}
                                                {#if item.attachment && item.attachment.url}
                                                    <span id="title"> : <a class="clear-link" target="_blank" rel="noopener noreferrer" href="{item.attachment.url}">Source</a></span>
                                                {/if}
                                            </div>

                                            <div class="details-content">
                                                {#if item.content_html}
                                                    <p id="content">{@html item.content_html}</p>
                                                {/if}

                                                {#if item.description_html}
                                                    <p id="description">{@html item.description_html ?? 'No Description'}</p>
                                                {/if}
                                            </div>

                                            <div class="details-tags">
                                                {#if item.source && item.source.provider && item.source.provider.name && item.source.provider.url}
                                                    <p id="tag"><a class="clear-link" target="_blank" rel="noopener noreferrer" href="{item.source.provider.url}">{item.source.provider.name}</a></p>
                                                {/if}

                                                {#if item.attachment && item.attachment.file_size_display}
                                                    <p id="tag">{item.attachment.file_size_display}</p>
                                                {/if}

                                                {#if item.attachment && item.attachment.extension}
                                                    <p id="tag">{item.attachment.extension}</p>
                                                {/if}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            {/if}
                        </div>
                    {/each}
                    {#if hasMoreItems}
                        <button id="buttonMain" class="juni-18" on:click={() => loadMore(selectedChannelData.slug)}>
                            {#if loadingItems} Fetching More {/if}
                            {#if !loadingItems} Load More {/if}
                        </button>
                    {/if}
                </div>
            </div>
        {/if}
    </div>
    <!-- / Channel Content -->
    {/each}

    <div class="channel-load-more-button">
        {#if hasMoreChannels}
            <button id="buttonMain" class="juni-18" on:click={loadMoreChannels}>
                {#if loadingMoreChannels} Fetching More {/if}
                {#if !loadingMoreChannels} Load More Channels {/if}
            </button>
        {/if}
    </div>
</section>
<!-- / Site Content Container -->
{/if}
